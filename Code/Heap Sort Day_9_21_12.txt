

  


public static void Bubble_sort(int arr[],int n)
{
  int i,j,t;
  int flag = 0;

  for(i=0;i<n;i++)
  {
    flag=0;
    for(j=0;j<n-i;j++)
    {
     if(arr[j] > arr[j+1])
     {
       flag=1;
       t=arr[j];
       arr[j] = arr[j+1];
       arr[j+1] = t;
     }
    }
    if(flag==0)
       break;
    sysout("\n pass" + i +"  ");
    display(arr,n);
  }
}



      
public static void Selection_sort(int arr[],int n)
{
  int i,j,t,min;   

  for(i=0;i < n;i++)
  {
    min = i;
    for(j=i+1; j<=n ;j++)
    {
      if(arr[min] > arr[j])  min=j;
    }
    if(i!=min)
    {
       t=arr[i];
       arr[i]=arr[min];
       arr[min]=t;
    }
  }

}

 



public static void insertion_sort(int arr[],int n)
{
  int i,j,k;

  for(i=1;i<=n;i++)
  {
    k=arr[i];

    for(j=i-1;j>=0 && k<arr[j];j--)
      arr[j+1] = arr[j];

    
    arr[j+1]=k;
  }//end of outer loop 

}
_____________________________________________________________


arr[10] = {12,23,44,56,67,78,88,99,-999};

  i

brr[10] = {2,4,5,78,90,890,5678,-999};

  j

res[20] = {2, 4, 5, 12, 23, 44,56, 67,78,88,90,99,890,5678,-999}

 tar

public static void merge_Ver1(int arr[],int brr[],int res[])
{
  int i,j,tar;
  i=0; j=0; tar =0;

  while((arr[i]!=-999) && (brr[j]!=-999))
  {
    if(arr[i] < brr[j])
    {
       res[tar] = arr[i];   
       i=i+1;
       tar=tar+1;
    }
    else if(brr[j] < arr[i])
    {
       res[tar] = brr[j];
       j=j+1;
       tar = tar+1;
    }
    else
    {
      res[tar]=arr[i];
      i++ ; j++; tar++;
    }
  }

  while(arr[i]!=-999)
  {
     res[tar] = arr[i];
     tar++;  i++;
  }
  
  while(brr[j]!=-999)
  {
    res[tar] = brr[j];
    tar++;  j++;
  }
  
}

___________________________________________________



public static void merge_Ver2(int arr[],int tar[],int low1,int high1,int low2,int high2)
{
  int i,j,k;
  i=low1;
  j=low2;

  k=low1;

  while((i<=high1) && (j<=high2))
  {
    if(arr[i] < arr[j])
    {
      tar[k] = arr[i];
      i++;   k++;
    }
    else if(arr[j] < arr[i])
    {
      tar[k] = arr[j];
      j++;  k++;
    }
    else
    {
      tar[k] = arr[i];
      i++; j++; k++;
    }
  }
  while(i<=high1)
  {
    tar[k] = arr[i];
    i++;  k++;
  }
  while(j <= high2)
  {
     tar[k] = arr[j];
     j++;  k++;
  }
}//end of function



public static void merge_sort(int arr[], int low, int high)
{
  int mid;
  int temp[]=new int[arr.length];
  
  if(low < high)
  {
     mid = (low + high) / 2;
     merge_sort(arr,low,mid);
     merge_sort(arr,mid+1,high);

     merge_Ver2(arr,temp,low,mid,mid+1,high);
     copy_arr(arr,temp,low,high);
  
  }
}


public static void copy(int arr[], int temp[], int low,int high)
{
   int i;
   for(i=low; i<=high;i++)
     arr[i] = temp[i];
}


____________________________________________________________________

Quick sort


      48 44 19 59 72 80 42 65 82 8 95 68


public static int partition(int arr[], int low, int high)
{
   int left, right, pivot, t;

   pivot=arr[low];
   left=low;
   right =high;

   while(left <= high)
   {
     while((arr[left]<=pivot) && (left<high))
         left++;

     while(arr[right] > pivot)
         right--;

     
     if(left < right)
     {
       t=arr[left];   arr[left] = arr[right] ; arr[right] = t;
       left++; right--;
     }
     else left++;
   }

   arr[low] = arr[right];
   arr[right] =pivot;

   return right;
}// end of function


public static void QuickSort(int arr[], int low,int high)
{
  int pivloc;

  if(low>=high)  return;

  pivloc = partition(arr,low,high);

  QuickSort(arr,low,pivloc-1);
  QuickSort(arr,pivloc+1, high);
}























  
